package com.yoga.controller.v2;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.json.JSONException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.qiniu.api.auth.AuthException;
import com.qiniu.api.auth.digest.Mac;
import com.qiniu.api.io.IoApi;
import com.qiniu.api.io.PutExtra;
import com.qiniu.api.rs.PutPolicy;
import com.qiniu.common.QiniuException;
import com.qiniu.storage.UploadManager;
import com.qiniu.util.Auth;
import com.qiniu.util.StringMap;
import com.qiniu.util.UrlSafeBase64;
import com.yoga.dao.Weixin_blog_answer;
import com.yoga.dao.Weixin_blog_content;
import com.yoga.dao.Weixin_blog_distributor_signup;
import com.yoga.dao.Weixin_blog_saler;
import com.yoga.dao.Weixin_blog_saler_order;
import com.yoga.dao.Weixin_blog_saler_product;
import com.yoga.dao.Weixin_blog_teacher_course;
import com.yoga.dao.Weixin_blog_teacher_course_line;
import com.yoga.dao.Weixin_blog_teacher_course_line_buyer;
import com.yoga.dao.Weixin_blog_teacher_order;
import com.yoga.dao.Weixin_blog_teacher_order_buffer;
import com.yoga.dao.Weixin_blog_user;
import com.yoga.dao.Weixin_blog_user_logger;
import com.yoga.utils.AESUtil;
import com.yoga.utils.CommonUtil;
import com.yoga.utils.Pagination;
import com.yoga.weixin.WeixinUtil;
import com.yoga.weixin.pay.ConfigUtil;
import com.yoga.weixin.pay.PayCommonUtil;
import com.yoga.weixin.template.TemplateData;
import com.yoga.weixin.template.WxTemplate;

import net.sf.json.JSONObject;

/**
 * 
 * @author harry
 *
 */
@Controller
public class WeixinOtherController extends R{


	/**
	 * 清理
	 * @param session
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "w/clear.html")
	public @ResponseBody JSONObject clearMoreCount(
			HttpSession            session, 
			HttpServletRequest     request,
			HttpServletResponse    response
			)  { 
		JSONObject result = new JSONObject();
		result.put("statis",  other.clear());
		return result;
	}


	/**
	 * getOkener
	 * @param session
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "weixin/get/token.html")
	public @ResponseBody JSONObject getToken(
			HttpSession            session, 
			HttpServletRequest     request,
			HttpServletResponse    response
			)  { 
		JSONObject result = new JSONObject();
		result.put("status",   true);
		result.put("token",    weixin.getToken()[2]);
		return result;
	}


	private static final UploadManager  uploadManager = new UploadManager();


	/**
	 * 上传服务器
	 * @param t 1:图片  2：音频 3：视频
	 * @param serverId
	 * @param session
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "weixin/uploadRecord/{t}/{serverId}.html")
	public @ResponseBody JSONObject uploadRecord(
			@PathVariable("t")         int t,
			@PathVariable("serverId")  String serverId,
			HttpSession            session, 
			HttpServletRequest     request,
			HttpServletResponse    response
			)  { 
		JSONObject result = new JSONObject();
		String basePath   = request.getSession().getServletContext().getRealPath("/");
		String ctxPath    = basePath + File.separator + "weixin" + File.separator + CommonUtil.sdf_date.format( new Date() );
		String filename   = CommonUtil.sdf.format(new Date())+ "_"+new Random().nextInt(1000) ;
		String localname  = filename + "." + (t == 1?"jpg":"amr");
		CommonUtil.makeDir( ctxPath );
		R.downloadFile("http://file.api.weixin.qq.com/cgi-bin/media/get?media_id="+serverId+"&access_token="+ weixin.getToken()[0] , ctxPath+File.separator+localname );
		File file = new File( ctxPath + File.separator + localname );

		Object[] ttoken = weixin.getToken();
		if( file.length() > 0 ){
			if( t == 1) {
				Mac mac = new Mac( (String)ttoken[4] ,  (String)ttoken[5] );
				PutPolicy putPolicy = new PutPolicy( (String)ttoken[6] );
				if( file.length() > 10000 ){
					BufferedImage src = null  ;
					try {
						src = ImageIO.read( file );
						int width   = src.getWidth();  
						int height  = src.getHeight();  
						reduceImg( file.getAbsolutePath(), file.getAbsolutePath(), width, height);
					} catch (IOException e) {
						e.printStackTrace();
					} // 读入文件
				}
				try {
					IoApi.putFile(putPolicy.token( mac ) , localname , file.getAbsoluteFile(), new PutExtra() );
				} catch (AuthException e) {
					e.printStackTrace();
				} catch (JSONException e) {
					e.printStackTrace();
				}   
				filename = localname; 
			}else{
				Auth auth = Auth.create(ttoken[4]+"",ttoken[5]+"" );	
				String urlbase64 = UrlSafeBase64.encodeToString( ttoken[6]+":"+ filename+".mp3" );
				String token = auth.uploadToken( (String)ttoken[6] ,null,3600 ,new StringMap().putNotEmpty("persistentOps", "avthumb/mp3|saveas/"+ urlbase64).putNotEmpty("persistentPipeline", "fishtree"), true);
				try {
					//调用put方法上传
					uploadManager.put( file.getAbsoluteFile() , null, token );
				} catch ( QiniuException e ) {
				}     
				filename = filename+".mp3"; 
			}
		}
		result.put("filename", filename);
		result.put("fullpath",  File.separator + "weixin" + File.separator + CommonUtil.sdf_date.format( new Date() )+ File.separator +localname);
		result.put("status",    true);
		return result;
	}



	@RequestMapping(value="weixin/uploadSingleRecord/{cid}-{timelong}/{serverId}.html")
	public @ResponseBody JSONObject uploadSingleRecord(
			HttpServletRequest     request,
			@PathVariable("cid") Integer cid,
			@PathVariable("timelong") Integer timelong,
			@PathVariable("serverId") String serverId
			){
		JSONObject result = new JSONObject();
		Weixin_blog_content content = weixin.getWeixinContent(cid);
		if(content == null){
			result.put("status",    false);
			return result;
		}
		String basePath   = request.getSession().getServletContext().getRealPath("/");
		String ctxPath    = basePath + File.separator + "weixin" + File.separator + CommonUtil.sdf_date.format( new Date() );
		String filename   = CommonUtil.sdf.format(new Date())+ "_"+new Random().nextInt(1000) ;
		String localname  = filename + ".amr";
		CommonUtil.makeDir( ctxPath );
		R.downloadFile("http://file.api.weixin.qq.com/cgi-bin/media/get?media_id="+serverId+"&access_token="+ weixin.getToken()[0] , ctxPath+File.separator+localname );
		File file = new File( ctxPath + File.separator + localname );
		if( file.length() > 0 ){
			Object[] ttoken = weixin.getToken();
			Auth auth = Auth.create(ttoken[4]+"",ttoken[5]+"" );	
			String urlbase64 = UrlSafeBase64.encodeToString( ttoken[6]+":"+ filename+".mp3" );
			String token = auth.uploadToken( ttoken[6]+"" ,null,3600 ,new StringMap().putNotEmpty("persistentOps", "avthumb/mp3/ab/192k|saveas/"+ urlbase64).putNotEmpty("persistentPipeline", "fishtree"), true);
			try {
				//调用put方法上传
				uploadManager.put( file.getAbsoluteFile() , null, token );
			} catch ( QiniuException e ) {
			}     
			filename = filename+".mp3"; 
			Weixin_blog_answer answer = new Weixin_blog_answer();
			SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			answer.setCid(cid);
			answer.setServerid(serverId);
			answer.setMp3path(filename);
			answer.setTimelong(timelong);
			answer.setCreatetime(f.format(new Date()));
			if(content.getHasanswer() == 0){
				answer.setType(0);
			}else{
				answer.setType(1);				
			}
			int res = weixin.addOrUpdateAnswer(answer);
			result.put("aid", res);
		}
		result.put("status",    true);
		return result;
	}


	/**
	 * 
	 * @param aid
	 * @return
	 */
	@RequestMapping(value="weixin/removeSingleRecord/{aid}.html")
	public @ResponseBody JSONObject removeAnswer(
			@PathVariable("aid") Integer aid
			){
		JSONObject result = new JSONObject();
		int res = weixin.delAnswer(aid);
		result.put("code", res);
		return result;
	}




	/**
	 * 上传服务器
	 * @param t 1:图片  2：音频 3：视频
	 * @param serverId
	 * @param session
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "weixin/uploadRecordOnlydown/{serverId}.html")
	public  @ResponseBody JSONObject uploadRecordOnlyDownload(
			@PathVariable("serverId")  String serverId,
			HttpSession            session, 
			HttpServletRequest     request,
			HttpServletResponse    response
			)  { 
		JSONObject result = new JSONObject();
		String basePath   = request.getSession().getServletContext().getRealPath("/");
		String ctxPath    = basePath + File.separator + "weixin" + File.separator + CommonUtil.sdf_date.format( new Date() );
		String filename   = CommonUtil.sdf.format(new Date())+ "_"+new Random().nextInt(1000) ;
		String localname  = filename + ".amr";
		CommonUtil.makeDir( ctxPath );
		R.downloadFile("http://file.api.weixin.qq.com/cgi-bin/media/get?media_id="+serverId+"&access_token="+ weixin.getToken()[0] , ctxPath+File.separator+localname );
		File file = new File( ctxPath + File.separator + localname );
		if( file.length() > 0 ){
			result.put("filename",  filename);
			result.put("fullpath",  File.separator + "weixin" + File.separator + CommonUtil.sdf_date.format( new Date() )+ File.separator +localname);
			result.put("status",    true);
			result.put("token",     weixin.getToken()[2]);
		}else{
			result.put("status",    false);
		}
		return result;
	}





	/**
	 * http://www.cnblogs.com/wanglonghai/p/4569354.html
	 * @param request
	 * @param response
	 * @param session
	 * @param id
	 * @return
	 * @throws IOException 
	 */
	@RequestMapping(value = "order/notify.html")
	public void orderNotify(  
			@RequestBody String body, 
			final HttpServletRequest  request ,
			final HttpServletResponse response
			) throws IOException {
		Document document=null;
		Map<String, String> map = new HashMap<String, String>();
		try {
			document = DocumentHelper.parseText(body);
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		Iterator<?> rootIterator = document.getRootElement().elementIterator();
		while( rootIterator.hasNext() ){
			Element element= (Element) rootIterator.next();
			map.put(element.getName(), element.getText());
		}
		// 如果参数的值为空不参与签名；
		SortedMap<String, Object> map1  = new TreeMap<String, Object>();
		if( map.get("result_code") != null && map.get("result_code").equals("SUCCESS") ){
			map1.put("return_code", "SUCCESS");
			map1.put("return_msg",  "OK");
		} else{
			map1.put("return_code", "FAIL");
			map1.put("return_msg",  "支付失败");
		}
		try {
			response.getWriter().write(PayCommonUtil.getRequestXml(map1));
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(map1.get("return_code").equals("SUCCESS")){
			String orderid  = map.get("out_trade_no");    //商户订单号
			String trade_no = map.get("transaction_id");  //银行返回的流水号(微信支付的订单号)
			Weixin_blog_user_logger logg = weixin.getWXUserLoggerByOrderMumber(orderid);
			if( logg == null ){
				return ;
			}
			Weixin_blog_user user    = weixin.getWeixinUser(logg.getWid());
			if( user == null ){
				return ;
			}
			if( logg != null ){
				logg.setIsgiveup(1);
				logg.setWxordernum(trade_no);
				logg.setUpdatetime(getTime());
				weixin.addOrUpdateUserLogger( logg );
				int m=Integer.parseInt(logg.getTmoney());
				if( logg.getType() == 1 ){//问答
					Weixin_blog_user teacher = weixin.getWeixinUser( logg.getCid() );
					Weixin_blog_content content = new Weixin_blog_content();
					content.setTitle( logg.getContent() );
					content.setSynopsis( logg.getContent()); 
					content.setCreatetime( getTime() );
					content.setContent( logg.getContent()); 
					content.setStatus(1);
					content.setWid( user.getId() );
					content.setAskid( teacher.getId() );
					content.setIsopen(logg.getIsopen());
					content.setAskmoney(logg.getTmoney());
					content.setLoggerid(logg.getId());
					content.setOrdernumber(orderid);
					Object[] res = weixin.addOrUpdateWeixinContent(content);
					if( res != null){				
						boolean success = (boolean) res[0];
						if( success ){
							logg.setContentid(Integer.parseInt(res[1].toString()));
							String  fcbl = "8/2";
							String [] bl = fcbl.split("/");
							if( m > 0 ){  // 记录分成订单
								Weixin_blog_teacher_order_buffer torder = new Weixin_blog_teacher_order_buffer();
								torder.setCid( Integer.parseInt(res[1]+"") );
								torder.setCname( logg.getContent() );
								torder.setCreatetime( getTime() );
								torder.setWid( user.getId() );
								torder.setWxid( user.getWxid() );
								torder.setTwxid( teacher.getWxid() );
								torder.setTmoney( String.valueOf(m) );//单笔总金额
								torder.setTid( teacher.getId() );
								torder.setProfit("0");//收益
								torder.setMoney( String.valueOf(m) ); //平台金额
								torder.setProfit( getDecimalNumber(m,bl[1]));
								torder.setMoney(  getDecimalNumber(m,bl[0]));
								torder.setFcbl( fcbl );
								torder.setLoggerid(logg.getId());
								torder.setOrdernumber(orderid);
								int bufferorder = order.addOrUpdateOrderBuffer( torder );
								if( bufferorder > 0 ) {
									Weixin_blog_content ccontent = weixin.getWeixinContent( Integer.parseInt(res[1]+"") );
									if( ccontent != null ){
										ccontent.setOrderid( bufferorder );
										weixin.addOrUpdateWeixinContent(ccontent);
									}
								}
							}
							if( res != null && teacher.getWxid() != null && teacher.getWxid().length() > 10 ){ // 
								sendTeacherTemplate(teacher.getWxid(), content , user.getNickname(), res[1].toString(), getDecimalNumber(m,bl[0]));
							}
						}
					}
				}else if( logg.getType() == 2 ){//课程
					Weixin_blog_teacher_course course = weixin.getCourse( logg.getCid() );
					Weixin_blog_user teacher = weixin.getWeixinUser( course.getUid() );
					Weixin_blog_teacher_order torder = new Weixin_blog_teacher_order();
					torder.setCid( course.getId() );
					torder.setCname( course.getCname() );
					torder.setCreatetime( getTime() );
					torder.setWid( user.getId() );
					torder.setWxid( user.getWxid() );
					torder.setType(logg.getType()==2?1:0);
					torder.setTid( teacher.getId() );
					torder.setTwxid( teacher.getWxid());
					torder.setTmoney( logg.getTmoney());
					if( logg.getSwid() > 0 ){
						torder.setSaleid(logg.getSwid());
						torder.setSalemoney(logg.getSdmoney());//分销员收益 
						int profit=Integer.parseInt(logg.getTmoney())-Integer.parseInt(logg.getSmoney());
						torder.setProfit(String.valueOf(profit));//平台利润
						torder.setMoney(logg.getStmoney());//老师收益
						torder.setFcbl("");
					}else{
						String fcbl = teacher.getFcbl();
						if( fcbl != null && fcbl.indexOf("/") > -1 && m > 0 ){
							String [] bl = teacher.getFcbl().split("/");
							torder.setProfit(getDecimalNumber(m,bl[1]));
							torder.setMoney( getDecimalNumber(m,bl[0]));
							torder.setFcbl( teacher.getFcbl() );
						}else{
							torder.setProfit("0");
							torder.setMoney("0");
							torder.setFcbl("0/0");
						}
					}
					torder.setOrdernumber(orderid);
					torder.setLoggerid(logg.getId());
					order.addOrUpdateOrder( torder );
					if( logg.getSwid() > 0 ){
						Weixin_blog_saler sale=saler.getSalerBySalerid(logg.getSwid());
						Weixin_blog_saler_product product=saler.getSaleProductByPidPtype(logg.getCid(), 1);
						Weixin_blog_saler_order sorder=new Weixin_blog_saler_order();
						sorder.setSalerid(sale.getSalerid());
						sorder.setSalername(sale.getSalename());
						sorder.setSalerwxid(sale.getSalerwxid());
						sorder.setOrdernumber(orderid);
						sorder.setBuyerid(user.getId());
						sorder.setBuywxid(user.getWxid());
						sorder.setBuyername(user.getNickname());
						sorder.setFcbl(product.getFcbl());
						sorder.setMoney(Integer.parseInt(logg.getSmoney()));
						sorder.setMoney_(Double.parseDouble(logg.getSdmoney()));
						sorder.setProductid(product.getProductid());
						sorder.setProductname(product.getProductname());
						sorder.setProducttype(product.getProducttype());
						sorder.setCreatetime(getTime());
						saler.addOrUpdateSalerOrder(sorder);
					}
					if( teacher.getWxid() != null && teacher.getWxid().length() > 10 ){ // 
						sendBuyCoureseTemplate( teacher.getWxid(), course);
					} 
				}else if( logg.getType() == 4 ){//线下课程
					Weixin_blog_teacher_course_line lcourse =  manager.getLineCourse(logg.getCid() );
					Weixin_blog_user teacher = weixin.getWeixinUser( lcourse.getUid() );
					Weixin_blog_teacher_order lorder = new Weixin_blog_teacher_order();
					lorder.setCid( lcourse.getId() );
					lorder.setCname( lcourse.getCname() );
					lorder.setCreatetime( getTime() );
					lorder.setMoney( String.valueOf(m ) );
					lorder.setWid( user.getId() );
					lorder.setWxid( user.getWxid() );
					lorder.setType(2);
					lorder.setTid( teacher.getId() );
					lorder.setTwxid( teacher.getWxid());
					lorder.setTmoney( String.valueOf(m) );
					String [] bl = teacher.getLine_fcbl().split("/"); 
					lorder.setProfit( getDecimalNumber(m,bl[1]));
					lorder.setMoney( getDecimalNumber(m,bl[0]) );
					lorder.setFcbl( teacher.getFcbl() );
					lorder.setOrdernumber(logg.getOrdernumber());
					lorder.setLoggerid(logg.getId());
					int buySuccess = order.addOrUpdateOrder( lorder );
					if( buySuccess > 0 ){
						Weixin_blog_teacher_course_line_buyer buyer = new Weixin_blog_teacher_course_line_buyer();

						Pagination havaMoneyList = manager.getLCourseMoneyList(" AND cid="+lcourse.getId() +" ORDER BY money ASC",1,100);
						if( havaMoneyList.getResults() != null && havaMoneyList.getResults().size() > 0 ){
							List<HashMap<String,Object>> mList = havaMoneyList.getResults();
							for( HashMap<String,Object> mm : mList ){
								if( m == Integer.valueOf(mm.get("money")+"") ){
									buyer.setMoney( m );
									buyer.setMid( Integer.valueOf(mm.get("id")+""));
									break;
								}
							}
						}
						buyer.setCid(lcourse.getId());
						buyer.setCname(lcourse.getCname());
						buyer.setUid(user.getId());
						buyer.setTid(lcourse.getUid());
						String usuer=logg.getContent();
						String[] usephone=usuer.split("\\|");
						buyer.setRealname(usephone[0]);
						buyer.setPhone(usephone[1]);
						buyer.setWxid(user.getWxid());
						buyer.setTwxid(teacher.getWxid());
						buyer.setType(2);
						buyer.setCreatetime(getTime());
						manager.addOrUpdateTeacherCourseLineBuyer(buyer);
						manager.updateTeacherCourseLineCount(lcourse.getId());
					}
				}else if( logg.getType() == 30 ){  // 2017 瑜伽理疗峰会
					Weixin_blog_distributor_signup signup = manager.getSignupByOrdernumber( logg.getOrdernumber() );
					if( signup != null ){
						signup.setWxordernum( trade_no );
						signup.setChecked(0); 
						signup.setUnionid( user.getUnionid() );
						manager.addOrUpdateSignup(signup);
						String msg = "亲爱的伽人："+ signup.getCname()+"，您已经成功报名2017世界瑜伽峰会，期待您的莅临，如有疑问请与400-018-6161联系。";
						weixin.sendMSM(signup.getMobile(), msg);
					}
				}
			}
		}
	}


	/**
	 * 
	 * @param serverid
	 * @return
	 */
	@RequestMapping(value = "weixin/uploadweixinimage.do", method = RequestMethod.POST)
	public @ResponseBody String uploadWeixinImage(String serverid){
		String strURL = "https://api.weixin.qq.com/cgi-bin/media/get?access_token=ACCESS_TOKEN&media_id=MEDIA_ID";
		Object [] token = weixin.getToken() ;
		File file = new File("wx" + System.currentTimeMillis() + "-" + Math.random() + ".jpg");
		try {
			URL url = new URL(strURL.replace("ACCESS_TOKEN", token[0].toString()).replace("MEDIA_ID", serverid));
			InputStream in = url.openStream();
			FileOutputStream out = new FileOutputStream(file);
			byte[] b = new byte[1024];
			int len = 0;
			while((len = in.read(b)) != -1){
				out.write(b, 0, len);
			}
			out.flush();
			in.close();
			out.close();
			return CommonUtil.upload1(file);
		} catch (Exception e) {
			e.printStackTrace();
			return "0";
		}finally{
			file.delete();
		}
	}


	/**
	 * 查看Token的刷新时间
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "weixin/flashtoken.html")
	public @ResponseBody JSONObject flashToken(
			final HttpServletRequest  request ,
			final HttpServletResponse response,
			final HttpSession         session
			){
		JSONObject map  = new JSONObject();
		Object [] token = weixin.getToken() ;
		map.put("token", token[0]);
		map.put("flashtime", sdf.format(token[1]));
		return map;
	}




	private static Auth auth = Auth.create(com.yoga.utils.Config.getString("ACCESS_KEY"),com.yoga.utils.Config.getString("SECRET_KEY") );
	private static String BUCKET_NAME = com.yoga.utils.Config.getString("BUCKET_NAME");

	/**
	 * 
	 * @param serverid
	 * @return
	 */
	@RequestMapping(value = "weixin/uploadweixinmp3.do")
	public @ResponseBody String uploadWeixinMp3(String serverid){
		String result = "";
		SimpleDateFormat f	= new SimpleDateFormat("yyyyMMddHHmmssSSS");
		String ctxPath    = File.separator + "home" + File.separator + "weixin" + File.separator + sdf_date.format( new Date() );
		String filename   = f.format(new Date())+ "_"+new Random().nextInt(1000) ;
		String localname  = filename + ".amr";
		File ffile = new File(ctxPath);
		if (!ffile.exists()) {
			ffile.mkdirs();
		}
		R.downloadFile("http://file.api.weixin.qq.com/cgi-bin/media/get?media_id="+serverid+"&access_token="+ weixin.getToken()[0] , ctxPath+File.separator+localname );
		File file = new File( ctxPath + File.separator + localname );
		if( file.length() > 0 ){
			String urlbase64 = UrlSafeBase64.encodeToString( BUCKET_NAME+":"+ filename+".mp3" );
			String token = auth.uploadToken( BUCKET_NAME ,null,3600 ,new StringMap().putNotEmpty("persistentOps", "avthumb/mp3|saveas/"+ urlbase64).putNotEmpty("persistentPipeline", "fishtree"), true);
			try {
				//调用put方法上传
				uploadManager.put( file.getAbsoluteFile() , null, token );
			} catch ( QiniuException e ) {
			}     
			result = filename+".mp3"; 
		}
		return result;
	}



	/**
	 * 
	 * @param type
	 * @param title
	 * @param name
	 * @param teacher
	 * @param opentime
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="weixin/sendmessage1.html",method=RequestMethod.POST)
	public ModelAndView sendMessage1(int type, String title, String name, String teacher, String opentime) throws Exception{
		ModelAndView mv = new ModelAndView("/ksite/ok");
		List<HashMap<String, Object>> signs = manager.getAllSign();
		HashMap<String, Object> active = manager.getCurrentActive();
		if(signs == null || active == null){
			return new ModelAndView("error");
		}
		String cid = active.get("cid").toString();
		String aid = active.get("id").toString();
		SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");
		Date end = f.parse("2016-11-13");
		Calendar c1 = Calendar.getInstance(),c2 = Calendar.getInstance();
		c1.setTime(end);
		c2.setTime(new Date());
		int days = c1.get(Calendar.DAY_OF_YEAR) - c2.get(Calendar.DAY_OF_YEAR);
		for(HashMap<String, Object> map : signs){	
			if(type ==1){
				String url = "https://api.weixin.qq.com/cgi-bin/message/template/send?access_token="+weixin.getToken()[0];
				WxTemplate temp = new WxTemplate();
				temp.setUrl( DOMAIN +"/w/faq/course.html?p=" + cid);
				temp.setTouser( map.get("wxid").toString() );
				temp.setTopcolor("#000000");
				temp.setTemplate_id( "RRZx6ZbjTwnlQcCdhfhyAloELtV3qBxTnQAzfNPe_Xg" );

				Map<String,TemplateData> m = new HashMap<String,TemplateData>();
				TemplateData first = new TemplateData();
				first.setColor("#000000");
				first.setValue(title);
				m.put("first", first);  

				TemplateData keyword1 = new TemplateData();
				keyword1.setColor("#000000");
				keyword1.setValue(name);
				m.put("keyword1", keyword1);

				TemplateData keyword2 = new TemplateData();
				keyword2.setColor("#000000");
				keyword2.setValue(teacher);
				m.put("keyword2", keyword2);

				TemplateData keyword3 = new TemplateData();
				keyword3.setColor("#000000");
				keyword3.setValue(opentime);
				m.put("keyword3", keyword3);

				TemplateData remark = new TemplateData();
				remark.setColor("#000000");
				remark.setValue("点击链接，进入瑜是乎平台，课程抢先听！");
				m.put("remark", remark);

				temp.setData( m );
				String jsonString = JSONObject.fromObject(temp).toString();
				try {
					WeixinUtil.httpRequest(url, "POST", jsonString);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}else{
				String url = "https://api.weixin.qq.com/cgi-bin/message/template/send?access_token="+weixin.getToken()[0];
				WxTemplate temp = new WxTemplate();
				temp.setUrl( DOMAIN +"/w/jxy/item/"+aid+".html");
				temp.setTouser( map.get("wxid").toString() );
				temp.setTopcolor("#000000");
				temp.setTemplate_id( "jLE5tvQa49_Jxpfl3IDIACsSQD7n7OFVyncxlvDmpA0" );

				Map<String,TemplateData> m = new HashMap<String,TemplateData>();
				TemplateData first = new TemplateData();
				first.setColor("#000000");
				first.setValue(title);
				m.put("first", first);  

				TemplateData keyword1 = new TemplateData();
				keyword1.setColor("#000000");
				keyword1.setValue(name);
				m.put("keyword1", keyword1);

				TemplateData keyword2 = new TemplateData();
				keyword2.setColor("#000000");
				keyword2.setValue(teacher);
				m.put("keyword2", keyword2);

				TemplateData keyword3 = new TemplateData();
				keyword3.setColor("#000000");
				keyword3.setValue(opentime);
				m.put("keyword3", keyword3);

				TemplateData keyword4 = new TemplateData();
				keyword4.setColor("#000000");
				keyword4.setValue(days + "节课时");
				m.put("keyword4", keyword4);

				TemplateData remark = new TemplateData();
				remark.setColor("#000000");
				remark.setValue("点击链接，进入瑜是乎平台，课程抢先听！");
				m.put("remark", remark);

				temp.setData( m );
				String jsonString = JSONObject.fromObject(temp).toString();
				try {
					WeixinUtil.httpRequest(url, "POST", jsonString);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return mv;
	}



	/**
	 * @param session
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "v2/socket.shtml")
	public ModelAndView v2Socket(
			HttpSession            session, 
			HttpServletRequest     request,
			HttpServletResponse    response
			) { 
		HashMap<String, Object> map = new HashMap<String, Object>();
		return new ModelAndView("/ksite/active/socket",map );
	}





	/**
	 * 临时付款
	 * @param session
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("pay/money.html")
	public ModelAndView payMoney(
			HttpSession            session, 
			HttpServletRequest     request,
			HttpServletResponse    response,
			@RequestParam(value = "m", required = true, defaultValue = "0")  int m
			){
		HashMap<String, Object> map = new HashMap<String, Object>();
		String url            = DOMAIN+"/pay/money.html?m="+m; 
		Object[] token = weixin.getToken();
		if( token == null || token.length == 2 || token[2] == null ){
			token = weixin.getToken();
		}
		if( token == null || token.length == 2 || token[2] == null  ){
			token = weixin.getToken();
		}
		if( token == null || token.length == 2 || token[2] == null ){
			token = weixin.getToken();
		}  
		if( token != null && token.length > 2 ) {
			jsapiSignatureURL ( map,url,token[2] );
		}
		map.put("urlsecret",   AESUtil.Encrypt(url, R.cKey));
		Weixin_blog_user user = getWeixinSession( request,session );  
		map.put("uid",0);
		map.put("ordernumber",  0);
		map.put("money",m);
		if( user != null && user.getId() > 0 ){
			String appId     = map.get("appid")+"";
			String nonceStr  = map.get("nonceStr")+"";
			String timestamp = map.get("timestamp")+"";
			Object[] payInfo = PayCommonUtil.getPrepay_id(9999+"", nonceStr,(m*100)+"","T", user.getWxid() );
			if( payInfo != null && payInfo[1] != null && payInfo[0] != null ){
				String prepayid         = payInfo[1]+"";
				String ordernumber      = payInfo[0]+"";
				Map<String ,String >    signMap=new HashMap<String ,String>();
				signMap.put("appId",    appId);
				signMap.put("timeStamp",timestamp);
				signMap.put("package", "prepay_id="+prepayid);
				signMap.put("signType", "MD5");
				signMap.put("nonceStr", nonceStr);
				map.put("appId",        appId);
				map.put("timeStamp",    timestamp);
				map.put("nonceStr",     nonceStr);
				map.put("paytimestamp", timestamp);
				map.put("paypackage",   "prepay_id="+prepayid);
				map.put("paynonceStr",  nonceStr);
				map.put("paysignType",  "MD5");
				map.put("ordernumber",  ordernumber );
				map.put("paySign" ,     getPayCustomSign(signMap,ConfigUtil.API_KEY) );
				map.put("uid",          user.getId());
			}
		} 
		return new ModelAndView("/ksite/paymoney",map);
	}

}
